// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	investasi "investaBackend/business/investasi"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// InsertInvestasi provides a mock function with given fields: domain, ctx
func (_m *Repository) InsertInvestasi(domain investasi.DomainInvestasi, ctx context.Context) (investasi.DomainInvestasi, error) {
	ret := _m.Called(domain, ctx)

	var r0 investasi.DomainInvestasi
	if rf, ok := ret.Get(0).(func(investasi.DomainInvestasi, context.Context) investasi.DomainInvestasi); ok {
		r0 = rf(domain, ctx)
	} else {
		r0 = ret.Get(0).(investasi.DomainInvestasi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(investasi.DomainInvestasi, context.Context) error); ok {
		r1 = rf(domain, ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalInvestasiById provides a mock function with given fields: ctx, id
func (_m *Repository) TotalInvestasiById(ctx context.Context, id int) (investasi.DomainTotalInvestasi, error) {
	ret := _m.Called(ctx, id)

	var r0 investasi.DomainTotalInvestasi
	if rf, ok := ret.Get(0).(func(context.Context, int) investasi.DomainTotalInvestasi); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(investasi.DomainTotalInvestasi)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
