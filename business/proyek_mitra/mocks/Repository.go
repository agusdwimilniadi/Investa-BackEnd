// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	proyek_mitra "investaBackend/business/proyek_mitra"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateProyek provides a mock function with given fields: ctx, data
func (_m *Repository) CreateProyek(ctx context.Context, data proyek_mitra.Domain) (proyek_mitra.Domain, error) {
	ret := _m.Called(ctx, data)

	var r0 proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context, proyek_mitra.Domain) proyek_mitra.Domain); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(proyek_mitra.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, proyek_mitra.Domain) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProyek provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteProyek(ctx context.Context, id int) (proyek_mitra.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) proyek_mitra.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(proyek_mitra.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDataById provides a mock function with given fields: ctx, id
func (_m *Repository) GetAllDataById(ctx context.Context, id int) (proyek_mitra.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) proyek_mitra.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(proyek_mitra.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDataBySektor provides a mock function with given fields: ctx, id
func (_m *Repository) GetAllDataBySektor(ctx context.Context, id int) ([]proyek_mitra.Domain, error) {
	ret := _m.Called(ctx, id)

	var r0 []proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context, int) []proyek_mitra.Domain); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proyek_mitra.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDataProyek provides a mock function with given fields: ctx
func (_m *Repository) GetAllDataProyek(ctx context.Context) ([]proyek_mitra.Domain, error) {
	ret := _m.Called(ctx)

	var r0 []proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context) []proyek_mitra.Domain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]proyek_mitra.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProyek provides a mock function with given fields: ctx, data, id
func (_m *Repository) UpdateProyek(ctx context.Context, data proyek_mitra.Domain, id int) (proyek_mitra.Domain, error) {
	ret := _m.Called(ctx, data, id)

	var r0 proyek_mitra.Domain
	if rf, ok := ret.Get(0).(func(context.Context, proyek_mitra.Domain, int) proyek_mitra.Domain); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Get(0).(proyek_mitra.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, proyek_mitra.Domain, int) error); ok {
		r1 = rf(ctx, data, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
